AWSTemplateFormatVersion: '2010-09-09'
Description: My Dev Portal Stack
Outputs:
  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - .console.aws.amazon.com/apigateway/home?region=
        - Ref: AWS::Region
        - '#/apis/'
        - Ref: ApiGatewayApi
        - /stages/prod
  ApiId:
    Description: API Gateway API ID.
    Value:
      Ref: ApiGatewayApi
  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: ApiGatewayApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/prod
  CognitoIdentityPoolId:
    Description: Cognito Identity Pool ID
    Value:
      Ref: CognitoIdentityPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool App Client ID
    Value:
      Ref: CognitoUserPoolClient
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: CognitoUserPool
  CustomersTable:
    Description: CustomersTable
    Value:
      Ref: CustomersTable
  DevPortalFunctionName:
    Description: Developer Portal Lambda Function Name.
    Value:
      Ref: DevPortalLambdaFunction
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - .console.aws.amazon.com/lambda/home?region=
        - Ref: AWS::Region
        - '#/functions/'
        - Ref: DevPortalLambdaFunction
Parameters:
  AWSRegion:
    Default: us-east-1
    Description: The region to deploy to.
    Type: String
  ArtifactsS3BucketName:
    Description: The S3 bucket in which the Lambda function code is stored. Bucket
      names are globally unique, so you must change this.
    Type: String
  CognitoIdentityPoolName:
    Default: DevPortalUserPool
    Description: The name for your Cognito Identity Pool.
    Type: String
  DevPortalCustomersTableName:
    Default: DevPortalCustomers
    Description: The name of the DynamoDB Customers table.
    Type: String
  MarketplaceSubscriptionTopicName:
    Default: DevPortalMarketplaceSubscriptionTopic
    Description: The marketplace SNS topic for subscription/unsubscription events
    Type: String
Resources:
  ApiGatewayApi:
    Properties:
      DefinitionBody:
        basePath: /prod
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          version: 2016-09-02 22:37:24
        paths:
          /:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: mock
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses:
                  default:
                    statusCode: 200
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
          /catalog:
            get:
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: mock
          /marketplace-confirm/{usagePlanId}:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: mock
            post:
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
          /register:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: mock
            post:
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
          /{proxy+}:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: mock
            x-amazon-apigateway-any-method:
              parameters:
              - in: path
                name: proxy
                required: true
                type: string
              produces:
              - application/json
              responses: {}
              x-amazon-apigateway-auth:
                type: aws_iam
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Join:
                  - ''
                  - - Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function
                    - :${stageVariables.DevPortalFunctionName}/invocations
        schemes:
        - https
        swagger: 2.0
      StageName: prod
      Variables:
        DevPortalFunctionName:
          Ref: DevPortalLambdaFunction
    Type: AWS::Serverless::Api
  ApiGatewayMarketplaceMeteringRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - aws-marketplace:BatchMeterUsage
            - aws-marketplace:ResolveCustomer
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: ApiGatewayMeteringPolicy
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - MarketplaceMeteringRole
    Type: AWS::IAM::Role
  ArtifactsS3Bucket:
    DependsOn: DevPortalLambdaFunction
    Properties:
      BucketName:
        Ref: ArtifactsS3BucketName
    Type: AWS::S3::Bucket
  CognitoAuthenticatedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: CognitoIdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - execute-api:Invoke
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:execute-api:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':'
                - Ref: ApiGatewayApi
                - /prod/*/*
          Version: '2012-10-17'
        PolicyName: CognitoAuthenticatedRole
    Type: AWS::IAM::Role
  CognitoIdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName:
          Fn::Join:
          - ''
          - - cognito-idp.
            - Ref: AWS::Region
            - .amazonaws.com/
            - Ref: CognitoUserPool
      IdentityPoolName:
        Ref: CognitoIdentityPoolName
    Type: AWS::Cognito::IdentityPool
  CognitoIdentityPoolRoles:
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthenticatedRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  CognitoUserPool:
    Properties:
      LambdaConfig:
        PreSignUp:
          Fn::GetAtt:
          - PreSignupLambdaFunction
          - Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
      UserPoolName:
        Ref: CognitoIdentityPoolName
    Type: AWS::Cognito::UserPool
  CognitoUserPoolClient:
    Properties:
      ClientName: CognitoIdentityPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolClient
  CustomersTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: MarketplaceCustomerId
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: MarketplaceCustomerIdIndex
        KeySchema:
        - AttributeName: MarketplaceCustomerId
          KeyType: HASH
        Projection:
          NonKeyAttributes:
          - ApiKeyId
          ProjectionType: INCLUDE
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName:
        Ref: DevPortalCustomersTableName
    Type: AWS::DynamoDB::Table
  DevPortalLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - apigateway:*
            Effect: Allow
            Resource: '*'
          - Action:
            - aws-marketplace:ResolveCustomer
            Effect: Allow
            Resource: '*'
          - Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :table/
                - Ref: CustomersTable
          - Action:
            - dynamodb:Query
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :table/
                - Ref: CustomersTable
                - /index/MarketplaceCustomerIdIndex
          - Action:
            - s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ArtifactsS3BucketName
          - Action:
            - s3:GetObject
            - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ArtifactsS3BucketName
                - /*
          - Action:
            - s3:DeleteObject
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ArtifactsS3BucketName
                - /*
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  DevPortalLambdaFunction:
    Properties:
      CodeUri: s3://mainsite-20181013074908-deployment/4fae6d4444271003b8b97d9d9f22639c
      Environment:
        Variables:
          CustomersTableName:
            Ref: DevPortalCustomersTableName
          StaticBucketName:
            Ref: ArtifactsS3BucketName
      Events:
        ProxyApiGreedy:
          Properties:
            Method: ANY
            Path: /{proxy+}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
        ProxyApiRoot:
          Properties:
            Method: ANY
            Path: /
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      Handler: index.handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - DevPortalLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 30
    Type: AWS::Serverless::Function
  LambdaApiGatewayExecutionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - DevPortalLambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: ApiGatewayApi
          - /*/*
    Type: AWS::Lambda::Permission
  LambdaCognitoUserPoolExecutionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PreSignupLambdaFunction
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:cognito-idp:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - :userpool/
          - Ref: CognitoUserPool
    Type: AWS::Lambda::Permission
  PreSignupLambdaFunction:
    Properties:
      CodeUri: s3://mainsite-20181013074908-deployment/f7fe29956110ce0aa689a9b3fa47d7c7
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - DevPortalLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 3
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
